#!/usr/bin/env python3
import rospy

# from flask import Flask, render_template, request
import os
import threading

# from bottle import route, run, template
import bottle

@bottle.route('/')
def index():
    return bottle.template('maps.html', ros_ip=os.environ["ROS_IP"])

@bottle.route('/static/<filepath:path>')
def server_static(filepath):
    return bottle.static_file(filepath, root='static')



# @app.route("/")
# def index():
#     return render_template('index.html', ros_ip=os.environ["ROS_IP"])
#
# @app.route("/navi")
# def navi():
#     return render_template('nav.html', ros_ip=os.environ["ROS_IP"])
#
# @app.route("/maps")
# def nav():
#     return render_template('maps.html', ros_ip=os.environ["ROS_IP"])
#
# @app.route("/shutdown", methods=['GET'])
# def shutdown():
#     shutdown_func = request.environ.get('werkzeug.server.shutdown')
#     if shutdown_func is None:
#         raise RuntimeError('Not running werkzeug')
#     shutdown_func()
#     return "Shutting down..."
#

def start():


    bottle.TEMPLATE_PATH = ['templates']
    bottle.debug(True)
    bottle.run(host=os.environ["ROS_IP"], port=port)
    # app.run(host=os.environ["ROS_IP"], port=port, debug=True, threaded=False)
    # app.run(host=os.environ["ROS_IP"], port=port, debug=True, threaded=True)


def stop():
    import requests
    # resp = requests.get("http://{}:{}/shutdown".format(os.environ["ROS_IP"], port))





if __name__ == '__main__':
    try:

        rospy.init_node('webnode', anonymous=True)
        port = 7777
        # rospy.on_shutdown(stop)
        print("http://{}:{}".format(os.environ["ROS_IP"], port))
        start()
        # t1 = threading.Thread(target=start).start()

        rospy.spin()

    except rospy.ROSInterruptException:
        pass